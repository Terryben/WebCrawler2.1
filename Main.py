#Ben Terry
#05/25/2016
#program to learn how to grab text from a website
#No error checking yet.

import requests
import sys
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common import action_chains
from bs4 import BeautifulSoup
import time

test_url = "https://login.live.com/"

def getWebPage(wp_url):
    try:
        r = requests.get(wp_url)
        return r
    except Exception as e:
        print(e)
        return e

def getWebPageSel(wp_url):
    try:
        r = requests.get(wp_url)
        return r
    except Exception as e:
        print(e)
        return e



if __name__ == '__main__':
    print("There are: " + str(len(sys.argv)) + " command line args")
    username = sys.argv[1]
    password = sys.argv[2]
    print ("The username is: " + username + " and the password is: " + password)
    contents = getWebPage(test_url).content
    soup = BeautifulSoup(contents, "lxml")
    #print(test_url)
    print(soup.title.string)

    #make a browser driver. Part of the selenium package. I like Chrome
    ChromeDriver = webdriver.Chrome("F:\Programming\Python\WebCrawler\ChromeDriverForWC\chromedriver.exe")

    #get the webpage
    ChromeDriver.get(test_url)

    #Grab the Username id element. I found these IDs by manually looking at the source code on the page. Probably not how we should be doing it.
    UserNameElement = ChromeDriver.find_element_by_id("i0116")

    #Enter text into the elements text field
    UserNameElement.send_keys(username)

    #Grab the button element. I think we can search for "input type = submit" or something like that to find a button without the exact id.
    ButtonElement = ChromeDriver.find_element_by_id("idSIButton9")

    #Press the button
    ButtonElement.send_keys(Keys.ENTER)

    #Does the driver hold the new page we went to on button press? Test to see.
    #print(ChromeDriver.page_source)

    #password box is generated by javascript and not just static HTML. It is not a visible element that we can sent commands. Must use actions that send key presses like a person would.
    action = action_chains.ActionChains(ChromeDriver)
    time.sleep(3)
    action.send_keys(password)
    action.send_keys(Keys.ENTER)
    action.perform()


